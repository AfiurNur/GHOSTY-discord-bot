import discord
from discord.ext import commands, tasks
import asyncio

# IDs & config - update these to your server's IDs
VERIFICATION_ROLE_ID = 1242403090955501639
VERIFY_CHANNEL_NAME = "verify"
LOG_CHANNEL_NAME = "verification-logs"
UNVERIFIED_KICK_TIMEOUT = 10 * 60  # 10 minutes in seconds


class VerificationDropdown(discord.ui.Select):
    def __init__(self):
        options = [
            discord.SelectOption(
                label="Verify ‚úÖ",
                description="Click to verify yourself and gain access.",
                value=str(VERIFICATION_ROLE_ID)
            )
        ]
        super().__init__(placeholder="Click to verify yourself", min_values=1, max_values=1, options=options)

    async def callback(self, interaction: discord.Interaction):
        role_id = int(self.values[0])
        role = interaction.guild.get_role(role_id)

        if not role:
            await interaction.response.send_message("‚ö†Ô∏è The verification role does not exist.", ephemeral=True)
            return

        member = interaction.user

        if role in member.roles:
            await interaction.response.send_message("You are already verified!", ephemeral=True)
            return

        try:
            await member.add_roles(role)
            await interaction.response.send_message(
                f"‚úÖ You have been verified and given the **{role.name}** role!", ephemeral=True)
            # Cancel kick task since user verified
            cog = interaction.client.get_cog("VerificationCog")
            if cog:
                await cog.cancel_kick_task(member.id)
        except discord.Forbidden:
            await interaction.response.send_message("üö´ I don't have permission to assign that role.", ephemeral=True)
        except discord.HTTPException as e:
            await interaction.response.send_message(f"‚ùå Failed to assign role: {e}", ephemeral=True)


class VerificationView(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)
        self.add_item(VerificationDropdown())


class VerificationCog(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        # Track unverified members and their kick tasks {member_id: asyncio.Task}
        self.kick_tasks = {}

    def create_verification_embed(self):
        embed = discord.Embed(
            title="üîí Verify Yourself",
            description="Click below to verify and gain access to the server.",
            color=discord.Color.green()
        )
        embed.set_footer(text="Generated by GHOSTY - Developed by Afiur Nur.")
        embed.set_thumbnail(url="https://i.pinimg.com/originals/d8/16/4b/d8164b6fb6eebeabbd54e842971c050f.gif")
        return embed

    async def send_verification_message(self, member: discord.Member):
        embed = self.create_verification_embed()
        view = VerificationView()
        try:
            await member.send(content=f"Welcome to **{member.guild.name}**!", embed=embed, view=view)
            return "dm"
        except discord.Forbidden:
            # DM closed, fallback to verify channel
            verify_channel = discord.utils.get(member.guild.text_channels, name=VERIFY_CHANNEL_NAME)
            if verify_channel:
                await verify_channel.send(
                    content=f"{member.mention}, welcome! Please verify yourself using the menu below.",
                    embed=embed,
                    view=view
                )
            return "channel"

    async def log_failure(self, guild: discord.Guild, message: str):
        log_channel = discord.utils.get(guild.text_channels, name=LOG_CHANNEL_NAME)
        if log_channel:
            await log_channel.send(f"‚ö†Ô∏è {message}")
        else:
            print(f"[Verification Log] {message}")

    async def kick_unverified_member(self, member: discord.Member):
        """Kick the user if still unverified after timeout."""
        role = member.guild.get_role(VERIFICATION_ROLE_ID)
        try:
            # Wait timeout first
            await asyncio.sleep(UNVERIFIED_KICK_TIMEOUT)
            # Check if member is still unverified
            if role not in member.roles:
                try:
                    await member.kick(reason="Failed to verify within time limit.")
                    await self.log_failure(member.guild, f"Kicked unverified member {member} ({member.id}).")
                except discord.Forbidden:
                    await self.log_failure(member.guild, f"Failed to kick unverified member {member} ({member.id}) - missing permissions.")
                except Exception as e:
                    await self.log_failure(member.guild, f"Error kicking unverified member {member} ({member.id}): {e}")
            else:
                # Member verified in time, no action needed
                pass
        except asyncio.CancelledError:
            # Task cancelled because member verified
            pass
        finally:
            # Remove task from tracking dict
            self.kick_tasks.pop(member.id, None)

    async def schedule_kick(self, member: discord.Member):
        """Schedule the kick task and store it."""
        if member.id in self.kick_tasks:
            # Already scheduled
            return
        task = self.bot.loop.create_task(self.kick_unverified_member(member))
        self.kick_tasks[member.id] = task

    async def cancel_kick_task(self, member_id: int):
        """Cancel the kick task if member verifies."""
        task = self.kick_tasks.get(member_id)
        if task:
            task.cancel()
            self.kick_tasks.pop(member_id, None)

    @commands.command(name="verify")
    @commands.has_permissions(administrator=True)
    async def manual_verification_message(self, ctx: commands.Context):
        """Manually send the verification message to the current channel."""
        await ctx.send(embed=self.create_verification_embed(), view=VerificationView())

    @commands.Cog.listener()
    async def on_ready(self):
        """Register persistent views on bot startup."""
        self.bot.add_view(VerificationView())

    @commands.Cog.listener()
    async def on_member_join(self, member: discord.Member):
        """Send verification message via DM or fallback channel, and schedule auto-kick."""
        method = await self.send_verification_message(member)
        if method == "dm":
            print(f"[Verification] Sent verification DM to {member}")
        else:
            print(f"[Verification] Sent verification message in channel to {member}")

        # Schedule auto kick after timeout
        await self.schedule_kick(member)


async def setup(bot):
    await bot.add_cog(VerificationCog(bot))
