import discord
from discord.ext import commands

class VerificationDropdown(discord.ui.Select):
    def __init__(self, guild):
        options = [
            discord.SelectOption(label="Verify ✅", description="By selecting this option you can get verified.", value="1242403090955501639"),
        ]
        super().__init__(placeholder="Choose verify to verify yourself.", min_values=1, max_values=1, options=options)
        self.guild = guild  # Pass the guild reference for role fetching

    async def callback(self, interaction: discord.Interaction):
        role_id = int(self.values[0])  # Convert value (string) to integer (role ID)
        role = self.guild.get_role(role_id)

        if role is None:
            await interaction.response.send_message("This role does not exist.", ephemeral=True)
            return

        member = interaction.user
        try:
            await member.add_roles(role)
            await interaction.response.send_message(f"Role **{role.name}** has been assigned to you!", ephemeral=True)
        except discord.Forbidden:
            await interaction.response.send_message("I don't have permission to assign this role.", ephemeral=True)
        except discord.HTTPException as e:
            await interaction.response.send_message(f"An error occurred: {e}", ephemeral=True)

class PersistentVerificationView(discord.ui.View):
    def __init__(self, guild):
        super().__init__(timeout=None)  # No timeout for a persistent view
        self.add_item(VerificationDropdown(guild))

class VerificationCog(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.persistent_views = {}  # Store views per guild

    @commands.command(name="verify")
    async def send_verification(self, ctx: commands.Context):
        """Sends a persistent dropdown menu for assigning roles."""
        embed = discord.Embed(
            title="Verify Yourself ✅",
            description="Select verify ✅ to get yourself verified",
            color=discord.Color.green()
        )
        embed.set_author(name="Afiur nur", icon_url="https://media.discordapp.net/attachments/898426430537469963/1323306705916002395/wallhaven-v99yvm.jpg?ex=677408e8&is=6772b768&hm=1d1b3b7b4ca975ab192d19c017d645755adf2ca0f9401bf01931f81acc515885&=&format=webp&width=882&height=496")
        embed.set_thumbnail(url="https://i.pinimg.com/originals/d8/16/4b/d8164b6fb6eebeabbd54e842971c050f.gif")
        embed.add_field(name="GET VERIFIED", value="To access all the channels", inline=False)
        embed.set_footer(text="generated by GHOSTY - a multipurporse discord bot developed by Afiur Nur.")
        view = PersistentVerificationView(ctx.guild)
        self.persistent_views[ctx.guild.id] = view  # Store the view for later reference
        await ctx.send(embed=embed, view=view)

    @commands.Cog.listener()
    async def on_ready(self):
        """Register persistent views on bot startup."""
        for guild in self.bot.guilds:
            if guild.id not in self.persistent_views:
                view = PersistentVerificationView(guild)
                self.bot.add_view(view)  # Register the view globally

async def setup(bot):
    await bot.add_cog(VerificationCog(bot))
