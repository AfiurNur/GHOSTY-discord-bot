import discord
from discord.ext import commands
from discord import app_commands
import yt_dlp
import asyncio

# Replace with your guild ID
GUILD_ID = 1242396018704908289


class MusicCog(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.queues = {}
        self.voice_clients = {}
        self.yt_dl_options = {"format": "bestaudio/best"}
        self.ytdl = yt_dlp.YoutubeDL(self.yt_dl_options)
        self.ffmpeg_options = {
            'before_options': '-reconnect 1 -reconnect_streamed 1 -reconnect_delay_max 5',
            'options': '-vn -filter:a "volume=0.25"'
        }

    def play_next(self, guild_id):
        """Play the next song in the queue."""
        if guild_id in self.queues and self.queues[guild_id]:
            next_song = self.queues[guild_id].pop(0)
            voice_client = self.voice_clients[guild_id]

            player = discord.FFmpegOpusAudio(next_song['url'], **self.ffmpeg_options)
            voice_client.play(player, after=lambda e: self.play_next(guild_id))

    async def ensure_voice_connection(self, interaction):
        """Ensure the bot is connected to the user's voice channel."""
        if not interaction.user.voice or not interaction.user.voice.channel:
            await interaction.response.send_message("You need to be in a voice channel to use this command.", ephemeral=True)
            return False

        if interaction.guild.id not in self.voice_clients or not self.voice_clients[interaction.guild.id].is_connected():
            voice_client = await interaction.user.voice.channel.connect()
            self.voice_clients[interaction.guild.id] = voice_client

        return True

    @app_commands.command(name="play", description="Play a song from a URL in your voice channel.")
    @app_commands.guilds(discord.Object(id=GUILD_ID))
    async def play(self, interaction: discord.Interaction, url: str):
        """Play a song from the provided URL."""
        if not await self.ensure_voice_connection(interaction):
            return

        await interaction.response.defer()

        try:
            # Fetch song information
            loop = asyncio.get_event_loop()
            data = await loop.run_in_executor(None, lambda: self.ytdl.extract_info(url, download=False))
            song = {"title": data.get("title", "Unknown Title"), "url": data["url"], "thumbnail": data.get("thumbnail")}

            # Add the song to the queue
            if interaction.guild.id not in self.queues:
                self.queues[interaction.guild.id] = []
            self.queues[interaction.guild.id].append(song)

            # Start playing if no song is currently playing
            if not self.voice_clients[interaction.guild.id].is_playing():
                self.play_next(interaction.guild.id)

            # Send song embed
            embed = discord.Embed(
                title="Added to Queue" if self.voice_clients[interaction.guild.id].is_playing() else "Now Playing",
                description=f"**[{song['title']}]({url})**",
                color=discord.Color.blurple(),
            )
            embed.set_footer(text="generated by GHOSTY - a multipurporse discord bot developed by Afiur Nur.")
            if song["thumbnail"]:
                embed.set_thumbnail(url=song["thumbnail"])
            await interaction.followup.send(embed=embed)

        except Exception as e:
            await interaction.followup.send(f"An error occurred: {e}")

    @app_commands.command(name="pause", description="Pause the currently playing song.")
    @app_commands.guilds(discord.Object(id=GUILD_ID))
    async def pause(self, interaction: discord.Interaction):
        """Pause the current song."""
        voice_client = self.voice_clients.get(interaction.guild.id)
        if voice_client and voice_client.is_playing():
            voice_client.pause()
            await interaction.response.send_message("Playback paused.")
        else:
            await interaction.response.send_message("No song is currently playing.")

    @app_commands.command(name="resume", description="Resume the paused song.")
    @app_commands.guilds(discord.Object(id=GUILD_ID))
    async def resume(self, interaction: discord.Interaction):
        """Resume the paused song."""
        voice_client = self.voice_clients.get(interaction.guild.id)
        if voice_client and voice_client.is_paused():
            voice_client.resume()
            await interaction.response.send_message("Playback resumed.")
        else:
            await interaction.response.send_message("No song is currently paused.")

    @app_commands.command(name="skip", description="Skip the current song.")
    @app_commands.guilds(discord.Object(id=GUILD_ID))
    async def skip(self, interaction: discord.Interaction):
        """Skip the current song."""
        voice_client = self.voice_clients.get(interaction.guild.id)
        if voice_client and voice_client.is_playing():
            voice_client.stop()
            await interaction.response.send_message("Skipped the current song.")
        else:
            await interaction.response.send_message("No song is currently playing.")

    @app_commands.command(name="queue", description="View the current song queue.")
    @app_commands.guilds(discord.Object(id=GUILD_ID))
    async def queue(self, interaction: discord.Interaction):
        """Display the current song queue."""
        if interaction.guild.id not in self.queues or not self.queues[interaction.guild.id]:
            await interaction.response.send_message("The queue is currently empty.")
            return

        queue_list = "\n".join([f"{idx + 1}. {song['title']}" for idx, song in enumerate(self.queues[interaction.guild.id])])
        embed = discord.Embed(
            title="Current Queue",
            description=queue_list,
            color=discord.Color.blurple()
        )
        await interaction.response.send_message(embed=embed)

    @app_commands.command(name="stop", description="Stop playback and disconnect the bot.")
    @app_commands.guilds(discord.Object(id=GUILD_ID))
    async def stop(self, interaction: discord.Interaction):
        """Stop playback and disconnect from the voice channel."""
        voice_client = self.voice_clients.get(interaction.guild.id)
        if voice_client:
            voice_client.stop()
            await voice_client.disconnect()
            del self.voice_clients[interaction.guild.id]
            self.queues.pop(interaction.guild.id, None)
            await interaction.response.send_message("Playback stopped and disconnected.")
        else:
            await interaction.response.send_message("The bot is not connected to a voice channel.")


# Setup function to add the cog to the bot
async def setup(bot):
    await bot.add_cog(MusicCog(bot))
